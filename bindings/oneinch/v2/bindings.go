// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package oneinchv2

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IOneInchCallerCallDescription is an auto generated low-level Go binding around an user-defined struct.
type IOneInchCallerCallDescription struct {
	TargetWithMandatory *big.Int
	GasLimit            *big.Int
	Value               *big.Int
	Data                []byte
}

// OneInchExchangeSwapDescription is an auto generated low-level Go binding around an user-defined struct.
type OneInchExchangeSwapDescription struct {
	SrcToken         common.Address
	DstToken         common.Address
	SrcReceiver      common.Address
	DstReceiver      common.Address
	Amount           *big.Int
	MinReturnAmount  *big.Int
	GuaranteedAmount *big.Int
	Flags            *big.Int
	Referrer         common.Address
	Permit           []byte
}

// Oneinchv2ABI is the input ABI used to generate the binding from.
const Oneinchv2ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contractIERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contractIERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guaranteedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contractIOneInchCaller\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contractIERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contractIERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"structOneInchExchange.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"targetWithMandatory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structIOneInchCaller.CallDescription[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"discountedSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOneInchCaller\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contractIERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contractIERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"structOneInchExchange.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"targetWithMandatory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structIOneInchCaller.CallDescription[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// Oneinchv2Bin is the compiled bytecode used for deploying new contracts.
var Oneinchv2Bin = ""

// DeployOneinchv2 deploys a new Ethereum contract, binding an instance of Oneinchv2 to it.
func DeployOneinchv2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Oneinchv2, error) {
	parsed, err := abi.JSON(strings.NewReader(Oneinchv2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(Oneinchv2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oneinchv2{Oneinchv2Caller: Oneinchv2Caller{contract: contract}, Oneinchv2Transactor: Oneinchv2Transactor{contract: contract}, Oneinchv2Filterer: Oneinchv2Filterer{contract: contract}}, nil
}

// Oneinchv2 is an auto generated Go binding around an Ethereum contract.
type Oneinchv2 struct {
	Oneinchv2Caller     // Read-only binding to the contract
	Oneinchv2Transactor // Write-only binding to the contract
	Oneinchv2Filterer   // Log filterer for contract events
}

// Oneinchv2Caller is an auto generated read-only Go binding around an Ethereum contract.
type Oneinchv2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Oneinchv2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Oneinchv2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Oneinchv2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Oneinchv2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Oneinchv2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Oneinchv2Session struct {
	Contract     *Oneinchv2        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Oneinchv2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Oneinchv2CallerSession struct {
	Contract *Oneinchv2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// Oneinchv2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Oneinchv2TransactorSession struct {
	Contract     *Oneinchv2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// Oneinchv2Raw is an auto generated low-level Go binding around an Ethereum contract.
type Oneinchv2Raw struct {
	Contract *Oneinchv2 // Generic contract binding to access the raw methods on
}

// Oneinchv2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Oneinchv2CallerRaw struct {
	Contract *Oneinchv2Caller // Generic read-only contract binding to access the raw methods on
}

// Oneinchv2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Oneinchv2TransactorRaw struct {
	Contract *Oneinchv2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewOneinchv2 creates a new instance of Oneinchv2, bound to a specific deployed contract.
func NewOneinchv2(address common.Address, backend bind.ContractBackend) (*Oneinchv2, error) {
	contract, err := bindOneinchv2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oneinchv2{Oneinchv2Caller: Oneinchv2Caller{contract: contract}, Oneinchv2Transactor: Oneinchv2Transactor{contract: contract}, Oneinchv2Filterer: Oneinchv2Filterer{contract: contract}}, nil
}

// NewOneinchv2Caller creates a new read-only instance of Oneinchv2, bound to a specific deployed contract.
func NewOneinchv2Caller(address common.Address, caller bind.ContractCaller) (*Oneinchv2Caller, error) {
	contract, err := bindOneinchv2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Oneinchv2Caller{contract: contract}, nil
}

// NewOneinchv2Transactor creates a new write-only instance of Oneinchv2, bound to a specific deployed contract.
func NewOneinchv2Transactor(address common.Address, transactor bind.ContractTransactor) (*Oneinchv2Transactor, error) {
	contract, err := bindOneinchv2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Oneinchv2Transactor{contract: contract}, nil
}

// NewOneinchv2Filterer creates a new log filterer instance of Oneinchv2, bound to a specific deployed contract.
func NewOneinchv2Filterer(address common.Address, filterer bind.ContractFilterer) (*Oneinchv2Filterer, error) {
	contract, err := bindOneinchv2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Oneinchv2Filterer{contract: contract}, nil
}

// bindOneinchv2 binds a generic wrapper to an already deployed contract.
func bindOneinchv2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Oneinchv2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oneinchv2 *Oneinchv2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Oneinchv2.Contract.Oneinchv2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oneinchv2 *Oneinchv2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oneinchv2.Contract.Oneinchv2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oneinchv2 *Oneinchv2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oneinchv2.Contract.Oneinchv2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oneinchv2 *Oneinchv2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Oneinchv2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oneinchv2 *Oneinchv2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oneinchv2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oneinchv2 *Oneinchv2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oneinchv2.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Oneinchv2 *Oneinchv2Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Oneinchv2.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Oneinchv2 *Oneinchv2Session) Owner() (common.Address, error) {
	return _Oneinchv2.Contract.Owner(&_Oneinchv2.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Oneinchv2 *Oneinchv2CallerSession) Owner() (common.Address, error) {
	return _Oneinchv2.Contract.Owner(&_Oneinchv2.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Oneinchv2 *Oneinchv2Caller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Oneinchv2.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Oneinchv2 *Oneinchv2Session) Paused() (bool, error) {
	return _Oneinchv2.Contract.Paused(&_Oneinchv2.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Oneinchv2 *Oneinchv2CallerSession) Paused() (bool, error) {
	return _Oneinchv2.Contract.Paused(&_Oneinchv2.CallOpts)
}

// DiscountedSwap is a paid mutator transaction binding the contract method 0x34b0793b.
//
// Solidity: function discountedSwap(address caller, (address,address,address,address,uint256,uint256,uint256,uint256,address,bytes) desc, (uint256,uint256,uint256,bytes)[] calls) payable returns(uint256 returnAmount)
func (_Oneinchv2 *Oneinchv2Transactor) DiscountedSwap(opts *bind.TransactOpts, caller common.Address, desc OneInchExchangeSwapDescription, calls []IOneInchCallerCallDescription) (*types.Transaction, error) {
	return _Oneinchv2.contract.Transact(opts, "discountedSwap", caller, desc, calls)
}

// DiscountedSwap is a paid mutator transaction binding the contract method 0x34b0793b.
//
// Solidity: function discountedSwap(address caller, (address,address,address,address,uint256,uint256,uint256,uint256,address,bytes) desc, (uint256,uint256,uint256,bytes)[] calls) payable returns(uint256 returnAmount)
func (_Oneinchv2 *Oneinchv2Session) DiscountedSwap(caller common.Address, desc OneInchExchangeSwapDescription, calls []IOneInchCallerCallDescription) (*types.Transaction, error) {
	return _Oneinchv2.Contract.DiscountedSwap(&_Oneinchv2.TransactOpts, caller, desc, calls)
}

// DiscountedSwap is a paid mutator transaction binding the contract method 0x34b0793b.
//
// Solidity: function discountedSwap(address caller, (address,address,address,address,uint256,uint256,uint256,uint256,address,bytes) desc, (uint256,uint256,uint256,bytes)[] calls) payable returns(uint256 returnAmount)
func (_Oneinchv2 *Oneinchv2TransactorSession) DiscountedSwap(caller common.Address, desc OneInchExchangeSwapDescription, calls []IOneInchCallerCallDescription) (*types.Transaction, error) {
	return _Oneinchv2.Contract.DiscountedSwap(&_Oneinchv2.TransactOpts, caller, desc, calls)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Oneinchv2 *Oneinchv2Transactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oneinchv2.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Oneinchv2 *Oneinchv2Session) Pause() (*types.Transaction, error) {
	return _Oneinchv2.Contract.Pause(&_Oneinchv2.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Oneinchv2 *Oneinchv2TransactorSession) Pause() (*types.Transaction, error) {
	return _Oneinchv2.Contract.Pause(&_Oneinchv2.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Oneinchv2 *Oneinchv2Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oneinchv2.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Oneinchv2 *Oneinchv2Session) RenounceOwnership() (*types.Transaction, error) {
	return _Oneinchv2.Contract.RenounceOwnership(&_Oneinchv2.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Oneinchv2 *Oneinchv2TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Oneinchv2.Contract.RenounceOwnership(&_Oneinchv2.TransactOpts)
}

// RescueFunds is a paid mutator transaction binding the contract method 0x78e3214f.
//
// Solidity: function rescueFunds(address token, uint256 amount) returns()
func (_Oneinchv2 *Oneinchv2Transactor) RescueFunds(opts *bind.TransactOpts, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Oneinchv2.contract.Transact(opts, "rescueFunds", token, amount)
}

// RescueFunds is a paid mutator transaction binding the contract method 0x78e3214f.
//
// Solidity: function rescueFunds(address token, uint256 amount) returns()
func (_Oneinchv2 *Oneinchv2Session) RescueFunds(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Oneinchv2.Contract.RescueFunds(&_Oneinchv2.TransactOpts, token, amount)
}

// RescueFunds is a paid mutator transaction binding the contract method 0x78e3214f.
//
// Solidity: function rescueFunds(address token, uint256 amount) returns()
func (_Oneinchv2 *Oneinchv2TransactorSession) RescueFunds(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Oneinchv2.Contract.RescueFunds(&_Oneinchv2.TransactOpts, token, amount)
}

// Swap is a paid mutator transaction binding the contract method 0x90411a32.
//
// Solidity: function swap(address caller, (address,address,address,address,uint256,uint256,uint256,uint256,address,bytes) desc, (uint256,uint256,uint256,bytes)[] calls) payable returns(uint256 returnAmount)
func (_Oneinchv2 *Oneinchv2Transactor) Swap(opts *bind.TransactOpts, caller common.Address, desc OneInchExchangeSwapDescription, calls []IOneInchCallerCallDescription) (*types.Transaction, error) {
	return _Oneinchv2.contract.Transact(opts, "swap", caller, desc, calls)
}

// Swap is a paid mutator transaction binding the contract method 0x90411a32.
//
// Solidity: function swap(address caller, (address,address,address,address,uint256,uint256,uint256,uint256,address,bytes) desc, (uint256,uint256,uint256,bytes)[] calls) payable returns(uint256 returnAmount)
func (_Oneinchv2 *Oneinchv2Session) Swap(caller common.Address, desc OneInchExchangeSwapDescription, calls []IOneInchCallerCallDescription) (*types.Transaction, error) {
	return _Oneinchv2.Contract.Swap(&_Oneinchv2.TransactOpts, caller, desc, calls)
}

// Swap is a paid mutator transaction binding the contract method 0x90411a32.
//
// Solidity: function swap(address caller, (address,address,address,address,uint256,uint256,uint256,uint256,address,bytes) desc, (uint256,uint256,uint256,bytes)[] calls) payable returns(uint256 returnAmount)
func (_Oneinchv2 *Oneinchv2TransactorSession) Swap(caller common.Address, desc OneInchExchangeSwapDescription, calls []IOneInchCallerCallDescription) (*types.Transaction, error) {
	return _Oneinchv2.Contract.Swap(&_Oneinchv2.TransactOpts, caller, desc, calls)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Oneinchv2 *Oneinchv2Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Oneinchv2.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Oneinchv2 *Oneinchv2Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Oneinchv2.Contract.TransferOwnership(&_Oneinchv2.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Oneinchv2 *Oneinchv2TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Oneinchv2.Contract.TransferOwnership(&_Oneinchv2.TransactOpts, newOwner)
}

// Oneinchv2ErrorIterator is returned from FilterError and is used to iterate over the raw logs and unpacked data for Error events raised by the Oneinchv2 contract.
type Oneinchv2ErrorIterator struct {
	Event *Oneinchv2Error // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Oneinchv2ErrorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Oneinchv2Error)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Oneinchv2Error)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Oneinchv2ErrorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Oneinchv2ErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Oneinchv2Error represents a Error event raised by the Oneinchv2 contract.
type Oneinchv2Error struct {
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterError is a free log retrieval operation binding the contract event 0x08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa.
//
// Solidity: event Error(string reason)
func (_Oneinchv2 *Oneinchv2Filterer) FilterError(opts *bind.FilterOpts) (*Oneinchv2ErrorIterator, error) {

	logs, sub, err := _Oneinchv2.contract.FilterLogs(opts, "Error")
	if err != nil {
		return nil, err
	}
	return &Oneinchv2ErrorIterator{contract: _Oneinchv2.contract, event: "Error", logs: logs, sub: sub}, nil
}

// WatchError is a free log subscription operation binding the contract event 0x08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa.
//
// Solidity: event Error(string reason)
func (_Oneinchv2 *Oneinchv2Filterer) WatchError(opts *bind.WatchOpts, sink chan<- *Oneinchv2Error) (event.Subscription, error) {

	logs, sub, err := _Oneinchv2.contract.WatchLogs(opts, "Error")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Oneinchv2Error)
				if err := _Oneinchv2.contract.UnpackLog(event, "Error", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseError is a log parse operation binding the contract event 0x08c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa.
//
// Solidity: event Error(string reason)
func (_Oneinchv2 *Oneinchv2Filterer) ParseError(log types.Log) (*Oneinchv2Error, error) {
	event := new(Oneinchv2Error)
	if err := _Oneinchv2.contract.UnpackLog(event, "Error", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Oneinchv2OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Oneinchv2 contract.
type Oneinchv2OwnershipTransferredIterator struct {
	Event *Oneinchv2OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Oneinchv2OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Oneinchv2OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Oneinchv2OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Oneinchv2OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Oneinchv2OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Oneinchv2OwnershipTransferred represents a OwnershipTransferred event raised by the Oneinchv2 contract.
type Oneinchv2OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Oneinchv2 *Oneinchv2Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*Oneinchv2OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Oneinchv2.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &Oneinchv2OwnershipTransferredIterator{contract: _Oneinchv2.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Oneinchv2 *Oneinchv2Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Oneinchv2OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Oneinchv2.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Oneinchv2OwnershipTransferred)
				if err := _Oneinchv2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Oneinchv2 *Oneinchv2Filterer) ParseOwnershipTransferred(log types.Log) (*Oneinchv2OwnershipTransferred, error) {
	event := new(Oneinchv2OwnershipTransferred)
	if err := _Oneinchv2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Oneinchv2PausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Oneinchv2 contract.
type Oneinchv2PausedIterator struct {
	Event *Oneinchv2Paused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Oneinchv2PausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Oneinchv2Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Oneinchv2Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Oneinchv2PausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Oneinchv2PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Oneinchv2Paused represents a Paused event raised by the Oneinchv2 contract.
type Oneinchv2Paused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Oneinchv2 *Oneinchv2Filterer) FilterPaused(opts *bind.FilterOpts) (*Oneinchv2PausedIterator, error) {

	logs, sub, err := _Oneinchv2.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &Oneinchv2PausedIterator{contract: _Oneinchv2.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Oneinchv2 *Oneinchv2Filterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *Oneinchv2Paused) (event.Subscription, error) {

	logs, sub, err := _Oneinchv2.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Oneinchv2Paused)
				if err := _Oneinchv2.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Oneinchv2 *Oneinchv2Filterer) ParsePaused(log types.Log) (*Oneinchv2Paused, error) {
	event := new(Oneinchv2Paused)
	if err := _Oneinchv2.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Oneinchv2SwappedIterator is returned from FilterSwapped and is used to iterate over the raw logs and unpacked data for Swapped events raised by the Oneinchv2 contract.
type Oneinchv2SwappedIterator struct {
	Event *Oneinchv2Swapped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Oneinchv2SwappedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Oneinchv2Swapped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Oneinchv2Swapped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Oneinchv2SwappedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Oneinchv2SwappedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Oneinchv2Swapped represents a Swapped event raised by the Oneinchv2 contract.
type Oneinchv2Swapped struct {
	Sender           common.Address
	SrcToken         common.Address
	DstToken         common.Address
	DstReceiver      common.Address
	Amount           *big.Int
	SpentAmount      *big.Int
	ReturnAmount     *big.Int
	MinReturnAmount  *big.Int
	GuaranteedAmount *big.Int
	Referrer         common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterSwapped is a free log retrieval operation binding the contract event 0x76af224a143865a50b41496e1a73622698692c565c1214bc862f18e22d829c5e.
//
// Solidity: event Swapped(address indexed sender, address indexed srcToken, address indexed dstToken, address dstReceiver, uint256 amount, uint256 spentAmount, uint256 returnAmount, uint256 minReturnAmount, uint256 guaranteedAmount, address referrer)
func (_Oneinchv2 *Oneinchv2Filterer) FilterSwapped(opts *bind.FilterOpts, sender []common.Address, srcToken []common.Address, dstToken []common.Address) (*Oneinchv2SwappedIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var srcTokenRule []interface{}
	for _, srcTokenItem := range srcToken {
		srcTokenRule = append(srcTokenRule, srcTokenItem)
	}
	var dstTokenRule []interface{}
	for _, dstTokenItem := range dstToken {
		dstTokenRule = append(dstTokenRule, dstTokenItem)
	}

	logs, sub, err := _Oneinchv2.contract.FilterLogs(opts, "Swapped", senderRule, srcTokenRule, dstTokenRule)
	if err != nil {
		return nil, err
	}
	return &Oneinchv2SwappedIterator{contract: _Oneinchv2.contract, event: "Swapped", logs: logs, sub: sub}, nil
}

// WatchSwapped is a free log subscription operation binding the contract event 0x76af224a143865a50b41496e1a73622698692c565c1214bc862f18e22d829c5e.
//
// Solidity: event Swapped(address indexed sender, address indexed srcToken, address indexed dstToken, address dstReceiver, uint256 amount, uint256 spentAmount, uint256 returnAmount, uint256 minReturnAmount, uint256 guaranteedAmount, address referrer)
func (_Oneinchv2 *Oneinchv2Filterer) WatchSwapped(opts *bind.WatchOpts, sink chan<- *Oneinchv2Swapped, sender []common.Address, srcToken []common.Address, dstToken []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var srcTokenRule []interface{}
	for _, srcTokenItem := range srcToken {
		srcTokenRule = append(srcTokenRule, srcTokenItem)
	}
	var dstTokenRule []interface{}
	for _, dstTokenItem := range dstToken {
		dstTokenRule = append(dstTokenRule, dstTokenItem)
	}

	logs, sub, err := _Oneinchv2.contract.WatchLogs(opts, "Swapped", senderRule, srcTokenRule, dstTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Oneinchv2Swapped)
				if err := _Oneinchv2.contract.UnpackLog(event, "Swapped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSwapped is a log parse operation binding the contract event 0x76af224a143865a50b41496e1a73622698692c565c1214bc862f18e22d829c5e.
//
// Solidity: event Swapped(address indexed sender, address indexed srcToken, address indexed dstToken, address dstReceiver, uint256 amount, uint256 spentAmount, uint256 returnAmount, uint256 minReturnAmount, uint256 guaranteedAmount, address referrer)
func (_Oneinchv2 *Oneinchv2Filterer) ParseSwapped(log types.Log) (*Oneinchv2Swapped, error) {
	event := new(Oneinchv2Swapped)
	if err := _Oneinchv2.contract.UnpackLog(event, "Swapped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Oneinchv2UnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Oneinchv2 contract.
type Oneinchv2UnpausedIterator struct {
	Event *Oneinchv2Unpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Oneinchv2UnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Oneinchv2Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Oneinchv2Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Oneinchv2UnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Oneinchv2UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Oneinchv2Unpaused represents a Unpaused event raised by the Oneinchv2 contract.
type Oneinchv2Unpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Oneinchv2 *Oneinchv2Filterer) FilterUnpaused(opts *bind.FilterOpts) (*Oneinchv2UnpausedIterator, error) {

	logs, sub, err := _Oneinchv2.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &Oneinchv2UnpausedIterator{contract: _Oneinchv2.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Oneinchv2 *Oneinchv2Filterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *Oneinchv2Unpaused) (event.Subscription, error) {

	logs, sub, err := _Oneinchv2.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Oneinchv2Unpaused)
				if err := _Oneinchv2.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Oneinchv2 *Oneinchv2Filterer) ParseUnpaused(log types.Log) (*Oneinchv2Unpaused, error) {
	event := new(Oneinchv2Unpaused)
	if err := _Oneinchv2.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
